generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_STRING")
}
model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  emailHash            String    @unique
  createdAt            DateTime  @default(now())
  emailTokenSentAt     DateTime  @default(now())
  password             String    
  emailVerifToken      String
  isEmailVerified      Boolean   @default(false)
  provider             String
  picture              String    @default("https://example.com/default-picture.jpg")
  credits              Int       @default(10)
  // Optional relations
  subscriptions        Subscription[] // A user can have zero or many subscriptions
  dubbingProjects      DubbingProject[]
  subscriptionHistories SubscriptionHistory[]
  paymentMethods       PaymentMethod[]
  payments             Payment[]
  auditTrails          AuditTrail[]
}


model Pricing {
  id          Int      @id @default(autoincrement())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  createdAt   DateTime @default(now())

  subscriptions Subscription[]
  subscriptionHistories SubscriptionHistory[]
}
model Subscription {
  id           Int       @id @default(autoincrement())
  userId       Int?
  pricingId    Int
  startDate    DateTime  @default(now())
  endDate      DateTime?
  isActive     Boolean   @default(true)
  totalCredits Int       @default(10)
  usedCredits  Int       @default(0)

  user         User?     @relation(fields: [userId], references: [id])
  pricing      Pricing   @relation(fields: [pricingId], references: [id])
  dubbingProjects DubbingProject[]
  subscriptionHistories SubscriptionHistory[]
}


model DubbingProject {
  id              Int      @id @default(autoincrement())
  userId          Int
  name            String
  creditCost      Int
  currentLanguage String
  translateTo     String
  voice           String
  url             String @default("")
  youtubeUrl      String?
  uploadType      String   @default("file")
  durationMinutes Int
  status          String
  createdAt       DateTime @default(now())

  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id]) // Make the relation optional
  subscriptionId Int?          // Make subscriptionId optional
}

model SubscriptionHistory {
  id               Int       @id @default(autoincrement())
  userId           Int
  pricingId        Int
  startDate        DateTime  @default(now())
  endDate          DateTime?
  creditAllocated Int
  creditsUsed      Int

  user           User          @relation(fields: [userId], references: [id])
  pricing        Pricing       @relation(fields: [pricingId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?
}

model PaymentMethod {
  id                    Int      @id @default(autoincrement())
  userId                Int
  stripeCustomerId      String   @unique
  stripePaymentMethodId String   @unique
  createdAt             DateTime @default(now())

  user    User      @relation(fields: [userId], references: [id])
  payments Payment[]
}

model Payment {
  id              Int      @id @default(autoincrement())
  userId          Int
  amount          Decimal  @db.Decimal(10, 2)
  paymentDate     DateTime @default(now())
  paymentMethodId Int
  stripeChargeId  String   @unique
  status          String

  user          User          @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model AuditTrail {
  id         Int      @id @default(autoincrement())
  entityType String
  entityId   Int
  action     String
  changedAt  DateTime @default(now())
  changes    Json
  userId     Int
  user       User @relation(fields: [userId], references: [id])
  @@index([entityType, entityId])
}

