generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]

}

datasource db {
  provider = "sqlserver"
  url      = env("AZURE_SQL_DB_STRING")

}

model User {
  id                    Int                   @id @default(autoincrement())
  name                  String
  email                 String                @unique
  emailHash             String?               @unique
  createdAt             DateTime              @default(now())
  emailTokenSentAt      DateTime              @default(now())
  password              String
  emailVerifToken       String?
  isEmailVerified       Boolean               @default(false)
  provider              String
  picture               String                @default("https://example.com/default-picture.jpg")
  isSubscribed          Boolean               @default(false)
  credits               Int                   @default(10)
  subscriptions         Subscription[]
  dubbingProjects       DubbingProject[]
  subscriptionHistories SubscriptionHistory[]
  payments              Payment[]
  auditTrails           AuditTrail[]
}

model Subscription {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  stripeId String @unique

  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean
  status             String?
  priceId            String?
  planName           String?

  user User? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  dubbingProjects DubbingProject[]

  subscriptionHistories SubscriptionHistory[]
  customerId            String?

  isActive     Boolean   @default(false)
  startDate    DateTime?
  totalCredits Int?
  credits      Int?
}

model DubbingProject {
  id              Int      @id @default(autoincrement())
  userId          Int
  name            String
  projectType     String   @default("ATA")
  creditCost      Int
  currentLanguage String
  translateTo     String
  voice           String
  url             String   @default("")
  youtubeUrl      String?
  uploadType      String   @default("file")
  durationMinutes Int
  dubbingId       String?  @default("")
  status          String?
  createdAt       DateTime @default(now())

  user           User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?

  payments Payment[]
}

model SubscriptionHistory {
  id        Int       @id @default(autoincrement())
  userId    Int
  pricingId Int
  startDate DateTime  @default(now())
  endDate   DateTime?

  user           User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?
}

model Payment {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())

  stripeCustomerId String
  stripeChargeId   String           @unique
  status           String
  dubbingProject   DubbingProject[]
  user             User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AuditTrail {
  id         Int      @id @default(autoincrement())
  entityType String
  entityId   Int
  action     String
  changedAt  DateTime @default(now())
  changes    String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
}
